source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
lambdas[,n]
lambdas[,n]
probs <- theta*lambdas[,n]
probs <- theta*lambdas[,n]
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
lambdas
E_lambdas
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
dim(E_lambdas)
E_lambdas
samples$E_C
dim(samples$E_C)
dim(samples$E_lambdas)
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
lambdas
dim(lambdas)
lambdas[,n]
probs <- theta*lambdas[,n]
rmultinom(1, x, probs/sum(probs))
probs
rmultinom(1, x, probs)
probs
cat(n)
x[100]
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
n <- 1
x[1]
probs <- theta*lambdas[,n]
probs
rmultinom(1, x[n], probs/sum(probs))
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
?rgamma
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
K
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
xx <- seq(0,10, by=0.1)
xx
lb <- Q1(xx, E_C, E_lambdas)
Q1 <- function(theta, E_C, E_lambdas){
-theta*sum(E_lambdas) + log(theta) * sum(E_C)
}
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
xx <- seq(0,10, by=0.1)
lb <- Q1(xx, E_C, E_lambdas)
lb
plot(xx, lb)
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x)
x
lines(x, x)
?lines
plot(1:10)
lines(2:7)
lines(x)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x)
lines(x/10)
lines(lb)
lines(x)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x)
x
xx <- seq(0,100, by=0.1)
lb <- Q1(xx, E_C, E_lambdas)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x, lb)
xx <- seq(0,100, by=0.1)
lb <- Q1(xx, E_C, E_lambdas)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x, lb)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x, mean(lb))
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
xx <- seq(0,10, by=0.1)
lb <- Q1(xx, E_C, E_lambdas)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x, mean(lb))
mean(lb)
min(lb)
mean(lb)
mean(lb, na.rm=TRUE)
max(lb, na.rm=TRUE)
xx <- seq(0.1,10, by=0.1)
lb <- Q1(xx, E_C, E_lambdas)
plot(xx, lb, xlab="theta", ylab="Q-CH", main=i)
lines(x, mean(lb))
mean(lb)
lines(x, mean(lb))
x
mean(lb)
lines(x, rep(mean(lb), length(x)))
points(x, rep(mean(lb), length(x)))
x
x
sort(x)
hist(x)
hist(x, breaks=100)
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
Rcpp::sourceCpp('Documentos/Postdoc/src/rMMLE/src/likelihood_closeform.cpp')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
v
V
x
as.matrix(x)
dim(as.matrix(x))
dim(t(as.matrix(x)))
t(matrix(rep(1,1)))
t(matrix(rep(1,2)))
t(matrix(rep(1,10)))
V <- t(as.matrix(x))
W <- t(matrix(rep(1,1)))
V
W
likelihood_V_W_cpp(V, W, alpha, beta)
W
likelihood_V_W_cpp(V, 100, alpha, beta)
likelihood_V_W_cpp(V, W*0.1, alpha, beta)
likelihood_V_W_cpp(V, W*1000000, alpha, beta)
likelihood_V_W_cpp(V, W*1000°°000, alpha, beta)
likelihood_V_W_cpp(V, W*1000000, alpha, beta)
likelihood_V_W_cpp(V, W*100000000, alpha, beta)
likelihood_V_W_cpp(V, W*10000, alpha, beta)
likelihood_V_W_cpp(V, W*100, alpha, beta)
likelihood_V_W_cpp(V, W*10, alpha, beta)
likelihood_V_W_cpp(V, W*65, alpha, beta)
sapply(1:100, function(theta) {likelihood_V_W_cpp(V, as.matrix(theta), alpha, beta)})
thetas <- seq(0,100, by=0.1)
y <- sapply(1:100, function(theta) {likelihood_V_W_cpp(V, as.matrix(theta), alpha, beta)})
plot(thetas, y)
thetas <- seq(0,100, by=0.1)
y <- sapply(thetas, function(theta) {likelihood_V_W_cpp(V, as.matrix(theta), alpha, beta)})
plot(thetas, y)
EM_CH(x, K=5, theta=1, iter=35, alpha, beta)
rr <- recordPlot()
replayPlot(rr)
replayPlot(rr)
plot(thetas, y)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
lines(thetas, y)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
cat("\nem iter:", i)
cat("\nE_lambdas dim", dim(E_lambdas))
samples <- gibbs(x, theta, E_lambdas, alpha, beta)
E_C <- samples$E_C
E_lambdas <- samples$E_lambdas
theta = mean(x) / sum(E_lambdas)
cat("\ntheta:", theta)
xx <- seq(0.1,20, by=0.1)
lb <- Q2(xx, E_C)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
i <- 1
cat("\nem iter:", i)
cat("\nE_lambdas dim", dim(E_lambdas))
samples <- gibbs(x, theta, E_lambdas, alpha, beta)
E_C <- samples$E_C
E_lambdas <- samples$E_lambdas
theta = mean(x) / sum(E_lambdas)
cat("\ntheta:", theta)
xx <- seq(0.1,20, by=0.1)
lb <- Q2(xx, E_C)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
xx
lb <- Q2(xx, E_C)
samples <- gibbs(x, theta, E_lambdas, alpha, beta)
E_lambdas <- array(1, dim = c(K,N))
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
lines(thetas, y)
lines(thetas, y)
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
lines(thetas, y)
points(thetas, y, color="red")
points(thetas, y, col="red")
plot(xx, lb, xlab="theta", ylab="Q-C", main=i)
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
library(ggplot2)
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line()
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line()
p
print(p)
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw()
p
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw()
print(p)
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() + ggtitle(i)
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() + ggtitle(i)
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() + ggtitle("jj")
print(p)
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() + ggtitle(i)
print(p)
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() +
xlab("theta") + ylab("Q-C") + ggtitle(i)
print(p)
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() +
xlab("theta") + ylab("Q-CH") + ggtitle(i)
print(p)
df
df <- rbind(df, data.frame(theta=thetas, value = lb, method=i))
df
df <- rbind(df, data.frame(theta=thetas, value = lb, method=i))
data.frame(theta=thetas, value = lb, method=i)
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
df <- rbind(df, data.frame(theta=thetas, value = lb, method=as.character(i)))
df
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() +
xlab("theta") + ylab("Q-CH") + ggtitle(i)
print(p)
debugSource('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
df <- rbind(df, data.frame(theta=thetas, value = lb, method=as.character(i)))
p <- ggplot(df, aes(x = theta, y=value, group=method, color=method)) + geom_line() + theme_bw() +
xlab("theta") + ylab("Q-CH") + ggtitle(i)
print(p)
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
source('~/Documentos/Postdoc/src/rMMLE/analysis/test_lower_bounds_q1_q2.R')
digamma(1)
digamma(0)
digamma(0.0001)
digamma(1/50)
digamma(1/70)
digamma(1/1000)
digamma(1/1000) - digamma(1)
digamma(1)
digamma(1)
digamma(1/1000) - digamma(1)
install.packages("logisticPCA")
View(z)
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/generics.R')
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/VB_DirBer.R')
modelVBDirBer <- BernoulliNMF(V, K=K, model="DirBer", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
devtools::load_all()
setwd("~/Documentos/Postdoc/src/rMMLE-DirBer/analysis")
devtools::load_all()
# Easy, synthetic example with a block diagonal matrix to test the
# self-regularization property of the model
devtools::load_all()
library(dplyr)
library(tidyr)
library(ggplot2)
library(Matrix)
library(gtools)
library(data.table)
text_components <-  7
text_features <- 7
load("../data/adjacency_parlamentcat_sorted.RData")
F <- dim(V)[1]
N <- dim(V)[1]
# Insert some NA (these elements will be used for testing predictions)
mask_test <- array(0, dim=c(F,N))
for(f in 1:F){
for(n in 1:N){
if(runif(1) > 2){
mask_test[f,n] = 1
}
}
}
plot_V(mask_test)
# Complete matrix
V.complete <- V
# Test matrix
V.test <- V
is.na(V.test) <- !as.matrix(as.logical(mask_test))
# Training matrix
is.na(V) <- as.matrix(as.logical(mask_test))
# Plot V ----------------------------------------------------------------------
plot_V(V, labels=TRUE)
plot_V(V, labels=FALSE)
#ggsave(p, filename = "V_parlamentcat.eps", height=8, width=8, units='cm')
plot_V(V.complete, labels=FALSE)
plot_V(V, labels=FALSE)
plot_V(V.test, labels=FALSE)
modelVBDirDir <- BernoulliNMF(V, K=K, model="DirDir", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/BernoulliNMF.R')
modelVBDirDir <- BernoulliNMF(V, K=K, model="DirDir", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/VB_DirBer.R')
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/VB_DirBer.R')
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/BernoulliNMF.R')
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/BernoulliNMF.R')
modelVBDirDir <- BernoulliNMF(V, K=K, model="DirDir", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
devtools::load_all()
modelVBDirDir <- BernoulliNMF(V, K=K, model="DirDir", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
modelVBDirBer <- BernoulliNMF(V, K=K, model="DirBer", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
modelVBDirBer <- BernoulliNMF(V, K=K, model="DirBer", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
modelVBDirBer <- BernoulliNMF(V, K=K, model="DirBer", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
BernoulliNMF
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/BernoulliNMF.R')
modelVBDirBer <- BernoulliNMF(V, K=K, model="DirBer", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
devtools::load_all()
modelVBDirBer <- BernoulliNMF(V, K=K, model="DirBer", method="VB",
alpha=alpha, gamma=gamma,
iter=1000, burnin = 0.5)
source('~/Documentos/Postdoc/src/rMMLE-DirBer/R/VB_DirBer.R')
setwd("~/Documentos/Projects/twitter-followers-graph/analysis")
setwd("~/Documentos/Projects/twitter-followers-graph/analysis")
library(unvotes)
library(reshape2)
library(gplots)
# Set dataframe
df <- un_votes %>% select(rcid, country, vote)
df.dates <- un_roll_calls %>% select(rcid, date) %>% distinct(rcid, date)
df.dates$date <- as.Date(df.dates$date)
df <-  merge(df, df.dates)
df$vote <- as.integer(df$vote)
# Drop countries with low activity (lots of NA)
top_countries <- names(sort(table(d$country), decreasing = TRUE))[1:100]
df <- df %>% filter(country %in% top_countries)
# Sort contries by similarity and use this to factor then accordingly
V <- acast(df, country~rcid, value.var = "vote", drop=FALSE)
names(dimnames(V)) <- c("country", 'rcid')
res <- heatmap.2(V)
df.positions <- data.frame(country = rownames(V)[res$rowInd], position=1:nrow(V))
df$country <- factor(df$country, levels = df.positions$country)
# Rename votes by date
res <- arrange(df, date, rcid)
df$rcid <- match(df$rcid, unique(res$rcid))
df <- un_votes %>% select(rcid, country, vote)
df.dates <- un_roll_calls %>% select(rcid, date) %>% distinct(rcid, date)
df.dates$date <- as.Date(df.dates$date)
df <-  merge(df, df.dates)
df$vote <- as.integer(df$vote)
library(unvotes)
library(reshape2)
library(gplots)
df <- un_votes %>% select(rcid, country, vote)
df.dates <- un_roll_calls %>% select(rcid, date) %>% distinct(rcid, date)
df.dates$date <- as.Date(df.dates$date)
df <-  merge(df, df.dates)
df$vote <- as.integer(df$vote)
df <- un_votes %>% select(rcid, country, vote)
library(dplyr)
# Set dataframe
df <- un_votes %>% select(rcid, country, vote)
df.dates <- un_roll_calls %>% select(rcid, date) %>% distinct(rcid, date)
df.dates$date <- as.Date(df.dates$date)
df <-  merge(df, df.dates)
df$vote <- as.integer(df$vote)
# Drop countries with low activity (lots of NA)
top_countries <- names(sort(table(d$country), decreasing = TRUE))[1:100]
df <- df %>% filter(country %in% top_countries)
top_countries <- names(sort(table(df$country), decreasing = TRUE))[1:100]
df <- df %>% filter(country %in% top_countries)
# Sort contries by similarity and use this to factor then accordingly
V <- acast(df, country~rcid, value.var = "vote", drop=FALSE)
names(dimnames(V)) <- c("country", 'rcid')
res <- heatmap.2(V)
df.positions <- data.frame(country = rownames(V)[res$rowInd], position=1:nrow(V))
df$country <- factor(df$country, levels = df.positions$country)
res <- arrange(df, date, rcid)
df$rcid_sorted <- match(df$rcid, unique(res$rcid))
head(df)
head(df,20)
match(df$rcid, unique(res$rcid))
unique(res$rcid)
match(df$rcid, unique(res$rcid))
df$rcid
head(df,20)
head(df,1000)
df.V <- df
base_size <- 7
axis.text.y <- element_text(angle = 0, size=base_size*1, hjust = 1, colour = "black")
axis.text.x <- element_text(angle = 90, size=base_size*1, hjust = 1, colour = "grey50")
mytheme <- theme(
axis.text.x   = axis.text.x,
axis.text.y   = axis.text.y,
axis.ticks.x  = element_blank(),
axis.ticks.y  = element_blank(),
panel.grid.minor = element_blank(),
#legend.position = "none",
legend.title = element_blank(),
legend.key= element_rect(colour = "black"),
aspect.ratio=1)
selected.cols <- seq(1, max(df.V$rcid), by=100)
df.V$vote <- as.factor(df.V$vote)
library(ggplot2)
mytheme <- theme(
axis.text.x   = axis.text.x,
axis.text.y   = axis.text.y,
axis.ticks.x  = element_blank(),
axis.ticks.y  = element_blank(),
panel.grid.minor = element_blank(),
#legend.position = "none",
legend.title = element_blank(),
legend.key= element_rect(colour = "black"),
aspect.ratio=1)
selected.cols <- seq(1, max(df.V$rcid), by=100)
df.V$vote <- as.factor(df.V$vote)
base_size <- 7
axis.text.y <- element_text(angle = 0, size=base_size*1, hjust = 1, colour = "black")
axis.text.x <- element_text(angle = 90, size=base_size*1, hjust = 1, colour = "grey50")
mytheme <- theme(
axis.text.x   = axis.text.x,
axis.text.y   = axis.text.y,
axis.ticks.x  = element_blank(),
axis.ticks.y  = element_blank(),
panel.grid.minor = element_blank(),
#legend.position = "none",
legend.title = element_blank(),
legend.key= element_rect(colour = "black"),
aspect.ratio=1)
selected.cols <- seq(1, max(df.V$rcid), by=100)
df.V$vote <- as.factor(df.V$vote)
p <- ggplot(df.V, aes(x=rcid, y=country)) +
geom_tile(aes(fill = vote), colour = "white") +
scale_fill_manual(values=c("green", "blue", "red"), na.value = 'white',
labels = c("Sí", "Abstención", "No", "Ausente")) +
#scale_x_continuous(expand = c(0, 0), breaks=selected.cols,
#                                     labels=df.V$date[selected.cols]) +
scale_y_discrete(expand = c(0, 0)) +
theme_bw()  + ylab("") + mytheme +   coord_fixed()
print(p)
